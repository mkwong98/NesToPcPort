#pragma once
#include <SDL3/SDL.h>
#include <stack>

class console;
class mapper;

struct stackEntry {
	bool isPC;
	Uint16 value;
};

class game
{
public:
	console* myConsole;
	mapper* myMapper;
	Uint8 a;
	Uint8 x;
	Uint8 y;
	Uint8 s;
	bool flgC;
	bool flgZ;
	bool flgI;
	bool flgD;
	bool flgV;
	bool flgN;
	bool flgB;
	std::stack<stackEntry> mStack; 
	stackEntry poppedEntry;
	Uint32 threadSignal;
	Uint16 pushedAddress;
	bool gameEnded;

	game();
	void initGame();
	void endGame();
	Uint8 getStatus();
	void setStatus(Uint8 p);
	void opADC(Uint8 v);
	void opSBC(Uint8 v);
	void opAND(Uint8 v);
	void opORA(Uint8 v);
	void opEOR(Uint8 v);
	void opBIT(Uint8 v);

	void opINC(Uint16 address, Uint8 repeatTimes);
	void opDEC(Uint16 address, Uint8 repeatTimes);
	void opINX(Uint8 repeatTimes);
	void opDEX(Uint8 repeatTimes);
	void opINY(Uint8 repeatTimes);
	void opDEY(Uint8 repeatTimes);

	void opASL_A(Uint8 repeatTimes);
	void opASL_M(Uint16 address, Uint8 repeatTimes);
	void opLSR_A(Uint8 repeatTimes);
	void opLSR_M(Uint16 address, Uint8 repeatTimes);
	void opROL_A(Uint8 repeatTimes);
	void opROL_M(Uint16 address, Uint8 repeatTimes);
	void opROR_A(Uint8 repeatTimes);
	void opROR_M(Uint16 address, Uint8 repeatTimes);
	void opCMP(Uint8 v1, Uint8 v2);

	void setLoadFlag(Uint8 v);


	void pushAddress(Uint16 address);
	void popAddress();
	void pushStatus();
	void popStatus();
	void opPHA();
	void opPLA();

	void wait();
	void signal();

	void brk();
	void reset();
	void repeat();
	void SUB_0007E7();
	void SUB_000807();
	void SUB_000815();
	void SUB_000823();
	void SUB_000831();
	void SUB_000847();
	void SUB_000853();
	void nmi();
	void SUB_0008F3();
	void SUB_00098A();
	void SUB_0009B1();
	void SUB_000A30();
	void SUB_000A53();
	void SUB_000A5A();
	void SUB_000A5F();
	void SUB_000A64();
	void SUB_000A79();
	void SUB_000AA9();
	void SUB_000AB9();
	void SUB_000AC9();
	void SUB_000BAE();
	void SUB_000BB7();
	void SUB_000BBD();
	void SUB_000BCA();
	void SUB_000BF5();
	void SUB_000C04();
	void SUB_000C24();
	void SUB_000C34();
	void SUB_000C47();
	void SUB_000CC1();
	void SUB_000CF4();
	void SUB_000D76();
	void SUB_000D7F();
	void SUB_000D89();
	void SUB_000D9D();
	void SUB_000DB1();
	void SUB_000E0E();
	void SUB_000E24();
	void SUB_000E7C();
	void SUB_000F42();
	void SUB_000FA8();
	void SUB_000FC6();
	void SUB_001008();
	void SUB_001032();
	void SUB_001041();
	void SUB_00104C();
	void SUB_0010C0();
	void SUB_001175();
	void SUB_00119A();
	void SUB_0011A4();
	void SUB_0011CF();
	void SUB_0012CB();
	void SUB_001326();
	void SUB_00136A();
	void SUB_00137E();
	void SUB_0014EE();
	void SUB_0014F9();
	void SUB_001501();
	void SUB_00150A();
	void SUB_001547();
	void SUB_001697();
	void SUB_0016C6();
	void SUB_0017F2();
	void SUB_001800();
	void SUB_0018AD();
	void SUB_0018EB();
	void SUB_00191A();
	void SUB_001990();
	void SUB_0019E6();
	void SUB_0019E8();
	void SUB_001A16();
	void SUB_001A4C();
	void SUB_001BEE();
	void SUB_001C30();
	void SUB_001C69();
	void SUB_001CD0();
	void SUB_001D32();
	void SUB_001D8B();
	void SUB_001E86();
	void SUB_001EA5();
	void SUB_001F07();
	void SUB_001F40();
	void SUB_001FC3();
	void SUB_001FE4();
	void SUB_001FE8();
	void SUB_002016();
	void SUB_002048();
	void SUB_00205A();
	void SUB_002090();
	void SUB_0020AE();
	void SUB_0020F1();
	void SUB_002109();
	void SUB_00210F();
	void SUB_002112();
	void SUB_002130();
	void SUB_002166();
	void SUB_00219A();
	void SUB_0021E5();
	void SUB_002250();
	void SUB_0022B6();
	void SUB_0022F9();
	void SUB_002368();
	void SUB_00241B();
	void SUB_002538();
	void SUB_0025E8();
	void SUB_002626();
	void SUB_0026A5();
	void SUB_002770();
	void SUB_0027A3();
	void SUB_002806();
	void SUB_002834();
	void SUB_002968();
	void SUB_002971();
	void SUB_00297A();
	void SUB_002981();
	void SUB_002A01();
	void SUB_002A34();
	void SUB_002A5F();
	void SUB_002AA1();
	void SUB_002ACD();
	void SUB_002AD1();
	void SUB_002AD4();
	void SUB_002AD6();
	void SUB_002ADB();
	void SUB_002AE1();
	void SUB_002AEC();
	void SUB_002AF7();
	void SUB_002B06();
	void SUB_002B89();
	void SUB_002B8E();
	void SUB_002B92();
	void SUB_002B97();
	void SUB_002B9C();
	void SUB_002BA1();
	void SUB_002BA6();
	void SUB_002BA8();
	void SUB_002BB6();
	void SUB_002BDA();
	void SUB_002C29();
	void SUB_002C44();
	void SUB_002CBF();
	void SUB_002D8A();
	void SUB_002DC5();
	void SUB_002E0C();
	void SUB_002E6C();
	void SUB_002E79();
	void SUB_002F38();
	void SUB_002F51();
	void SUB_002F72();
	void SUB_002FD5();
	void SUB_002FD7();
	void SUB_002FDD();
	void SUB_002FE2();
	void SUB_002FE8();
	void SUB_002FEB();
	void SUB_002FEF();
	void SUB_002FF3();
	void SUB_002FF5();
	void SUB_003062();
	void SUB_003063();
	void SUB_003069();
	void SUB_003070();
	void SUB_003075();
	void SUB_003078();
	void SUB_003080();
	void SUB_003082();
	void SUB_003086();
	void SUB_003088();
	void SUB_00308C();
	void SUB_00308E();
	void SUB_003092();
	void SUB_003094();
	void SUB_003096();
	void SUB_00310A();
	void SUB_00311E();
	void SUB_003139();
	void SUB_003161();
	void SUB_003195();
	void SUB_0031B4();
	void SUB_0031EC();
	void SUB_003228();
	void SUB_00323C();
	void SUB_00324E();
	void SUB_0032D7();
	void SUB_00332D();
	void SUB_00332F();
	void SUB_00333E();
	void SUB_003342();
	void SUB_003344();
	void SUB_0033E3();
	void SUB_003404();
	void SUB_003426();
	void SUB_003435();
	void SUB_0034AC();
	void SUB_0034C2();
	void SUB_0034ED();
	void SUB_00350E();
	void SUB_003522();
	void SUB_003A48();
	void SUB_003A86();
	void SUB_003A8F();
	void SUB_003A93();
	void SUB_003A95();
	void SUB_003A9F();
	void SUB_003AA1();
	void SUB_003AB3();
	void SUB_003ABA();
	void SUB_003AC4();
	void SUB_003ACA();
	void SUB_003AD5();
	void SUB_003AD7();
	void SUB_003AE0();
	void SUB_003B75();
	void SUB_003B7E();
	void SUB_003B89();
	void SUB_003BB7();
	void SUB_003BC2();
	void SUB_003BF2();
	void SUB_003C16();
	void SUB_003C19();
	void SUB_003C28();
	void SUB_003C41();
	void SUB_003C44();
	void SUB_003C4B();
	void SUB_003C51();
	void SUB_003C62();
	void SUB_003C73();
	void SUB_003C7F();
	void SUB_003C90();
	void SUB_003C9D();
	void SUB_003D67();
	void SUB_003D9B();
	void SUB_003DA4();
	void SUB_003DD8();
	void SUB_003DE9();
	void SUB_003E00();
	void SUB_003E03();
	void SUB_003E09();
	void SUB_003E31();

};

