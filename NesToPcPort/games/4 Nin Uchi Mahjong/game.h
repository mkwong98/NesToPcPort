#pragma once
#include <SDL3/SDL.h>
#include <stack>
#include <vector>

class console;
class mapper;

struct stackEntry {
	bool isPC;
	Uint16 value;
};

class game
{
public:
	console* myConsole;
	mapper* myMapper;
	Uint8 a;
	Uint8 x;
	Uint8 y;
	Uint8 s;
	bool flgC;
	bool flgZ;
	bool flgI;
	bool flgD;
	bool flgV;
	bool flgN;
	bool flgB;
	stackEntry poppedEntry;
	Uint32 threadSignal;
	Uint32 pushedAddress;
	bool gameEnded;

	game();
	void initGame();
	void endGame();
	Uint8 getStatus();
	void setStatus(Uint8 p);
	void opADC(Uint8 v);
	void opSBC(Uint8 v);
	void opAND(Uint8 v);
	void opORA(Uint8 v);
	void opEOR(Uint8 v);
	void opBIT(Uint8 v);

	void opINC(Uint16 address, Uint8 repeatTimes);
	void opDEC(Uint16 address, Uint8 repeatTimes);
	void opINX(Uint8 repeatTimes);
	void opDEX(Uint8 repeatTimes);
	void opINY(Uint8 repeatTimes);
	void opDEY(Uint8 repeatTimes);

	void opASL_A(Uint8 repeatTimes);
	void opASL_M(Uint16 address, Uint8 repeatTimes);
	void opLSR_A(Uint8 repeatTimes);
	void opLSR_M(Uint16 address, Uint8 repeatTimes);
	void opROL_A(Uint8 repeatTimes);
	void opROL_M(Uint16 address, Uint8 repeatTimes);
	void opROR_A(Uint8 repeatTimes);
	void opROR_M(Uint16 address, Uint8 repeatTimes);
	void opCMP(Uint8 v1, Uint8 v2);

	void setLoadFlag(Uint8 v);

	void pushAddress(Uint16 address);
	void popAddress();
	void pushStatus();
	void popStatus();
	void opPLA();
	void opPHA();

	void wait();
	void signal();
	void repeat();
	void brk();

	void reset();
	void SUB_000062();
	void SUB_000068();
	void SUB_00006B();
	void SUB_00038B();
	void SUB_0003C9();
	void SUB_000429();
	void SUB_00043E();
	void SUB_000467();
	void SUB_0004F0();
	void SUB_000522();
	void SUB_000538();
	void SUB_00053F();
	void SUB_000570();
	void SUB_00059D();
	void SUB_0005E4();
	void SUB_000617();
	void SUB_00069B();
	void SUB_0006DB();
	void SUB_0007D9();
	void SUB_000811();
	void SUB_000855();
	void SUB_0008DC();
	void SUB_00090C();
	void SUB_00092B();
	void SUB_000964();
	void SUB_000A0D();
	void SUB_000A3C();
	void SUB_000A4A();
	void SUB_000A64();
	void SUB_000B23();
	void SUB_000B52();
	void SUB_000C05();
	void SUB_000C3E();
	void SUB_000C4C();
	void SUB_000C61();
	void SUB_000C7F();
	void SUB_000CC5();
	void SUB_000CD2();
	void SUB_000CDB();
	void SUB_000CF8();
	void SUB_000D86();
	void SUB_000D8D();
	void SUB_000D9C();
	void SUB_000DA8();
	void SUB_000DDC();
	void SUB_000DF1();
	void SUB_000E09();
	void SUB_000E33();
	void SUB_000E6E();
	void SUB_000E7C();
	void SUB_000F14();
	void SUB_000F43();
	void SUB_000F79();
	void SUB_000FA9();
	void SUB_000FC0();
	void SUB_00105D();
	void SUB_00107E();
	void SUB_0010AD();
	void SUB_0010E2();
	void SUB_0010F0();
	void SUB_00113D();
	void SUB_0011DB();
	void SUB_001205();
	void SUB_001231();
	void SUB_001260();
	void SUB_001262();
	void SUB_001278();
	void SUB_0012D5();
	void SUB_001305();
	void SUB_0013B7();
	void SUB_001473();
	void SUB_001477();
	void SUB_001593();
	void SUB_0015F6();
	void SUB_001643();
	void SUB_001665();
	void SUB_0016FE();
	void SUB_0017DE();
	void SUB_00182B();
	void SUB_001860();
	void SUB_0018AE();
	void SUB_0019ED();
	void SUB_001A38();
	void SUB_001A92();
	void SUB_001AC0();
	void SUB_001AE4();
	void SUB_001AFB();
	void SUB_001B0F();
	void SUB_001B50();
	void SUB_001C24();
	void SUB_001C8E();
	void SUB_001CD4();
	void SUB_001D3B();
	void SUB_001D9E();
	void SUB_001E10();
	void SUB_001E21();
	void SUB_001E83();
	void SUB_001EB7();
	void SUB_001EED();
	void SUB_001F07();
	void SUB_001F38();
	void SUB_001F49();
	void SUB_001F76();
	void SUB_001FB3();
	void SUB_001FD3();
	void SUB_002077();
	void SUB_0020FD();
	void SUB_00216D();
	void SUB_002184();
	void SUB_0021A9();
	void SUB_0021E5();
	void SUB_002205();
	void SUB_002211();
	void SUB_002266();
	void SUB_0022EB();
	void SUB_00231D();
	void SUB_00240D();
	void SUB_002422();
	void SUB_002439();
	void SUB_00243A();
	void SUB_0024A1();
	void SUB_0024D8();
	void SUB_0025A8();
	void SUB_0025DD();
	void SUB_0025F7();
	void SUB_00262A();
	void SUB_00265D();
	void SUB_00276E();
	void SUB_0027BA();
	void SUB_0027BB();
	void SUB_0027CB();
	void SUB_002863();
	void SUB_002943();
	void SUB_002A0D();
	void SUB_002BD6();
	void SUB_002C39();
	void SUB_002C61();
	void SUB_002C7D();
	void SUB_002C99();
	void SUB_002CA7();
	void SUB_002CA9();
	void SUB_002CAB();
	void SUB_002CB1();
	void SUB_002CD1();
	void SUB_002CF1();
	void SUB_002CF2();
	void SUB_002CF7();
	void SUB_002D1F();
	void SUB_002D44();
	void SUB_002D64();
	void SUB_002DB1();
	void SUB_002E95();
	void SUB_002F04();
	void SUB_002F4C();
	void SUB_002F4D();
	void SUB_002FF9();
	void SUB_00301E();
	void SUB_00304F();
	void SUB_003089();
	void SUB_00324B();
	void SUB_003257();
	void SUB_003263();
	void SUB_00326F();
	void SUB_00327B();
	void SUB_003287();
	void SUB_003293();
	void SUB_00329D();
	void SUB_0032DB();
	void SUB_0032FB();
	void SUB_00342E();
	void SUB_00344F();
	void SUB_00346A();
	void SUB_003488();
	void SUB_0034EA();
	void SUB_00353E();
	void SUB_00355E();
	void SUB_0035A0();
	void SUB_003604();
	void SUB_003612();
	void SUB_00363C();
	void SUB_003657();
	void SUB_003680();
	void SUB_0036B4();
	void SUB_0036D1();
	void SUB_0036FC();
	void SUB_00370F();
	void SUB_003725();
	void SUB_003751();
	void SUB_00376C();
	void SUB_00379B();
	void SUB_0037DA();
	void SUB_003817();
	void SUB_003898();
	void SUB_0038BB();
	void SUB_0038DA();
	void SUB_003916();
	void SUB_003945();
	void SUB_003955();
	void SUB_003966();
	void SUB_00397F();
	void SUB_0039DC();
	void SUB_003A1C();
	void SUB_003A28();
	void SUB_003A33();
	void SUB_003A44();
	void SUB_003A52();
	void SUB_003A5F();
	void SUB_003A81();
	void SUB_003A8A();
	void SUB_003A8D();
	void SUB_003AC5();
	void SUB_003ADD();
	void SUB_003AF0();
	void SUB_003AFF();
	void SUB_003B19();
	void SUB_003B24();
	void SUB_003B49();
	void SUB_003B5D();
	void SUB_003B79();
	void SUB_003BDE();
	void SUB_003C0C();
	void SUB_003C38();
	void SUB_003C68();
	void SUB_003CBE();
	void SUB_003CC1();
	void SUB_003CFC();
	void nmi();
	void SUB_003E5B();
	void SUB_003E74();
	void SUB_003E8B();
	void SUB_003ECA();

};

