#pragma once
#include <SDL3/SDL.h>
#include <stack>

class console;
class mapper;

struct stackEntry {
	bool isPC;
	Uint16 value;
};

class game
{
public:
	console* myConsole;
	mapper* myMapper;
	Uint8 a;
	Uint8 x;
	Uint8 y;
	Uint8 s;
	bool flgC;
	bool flgZ;
	bool flgI;
	bool flgD;
	bool flgV;
	bool flgN;
	bool flgB;
	stackEntry poppedEntry;
	Uint32 threadSignal;

	game();
	~game();
	void initGame();
	void endGame();
	Uint8 getStatus();
	void setStatus(Uint8 p);
	void opADC(Uint8 v);
	void opSBC(Uint8 v);
	void opAND(Uint8 v);
	void opORA(Uint8 v);
	void opEOR(Uint8 v);
	void opBIT(Uint8 v);

	void opINC(Uint16 address, Uint8 repeatTimes);
	void opDEC(Uint16 address, Uint8 repeatTimes);
	void opINX(Uint8 repeatTimes);
	void opDEX(Uint8 repeatTimes);
	void opINY(Uint8 repeatTimes);
	void opDEY(Uint8 repeatTimes);

	void opASL_A(Uint8 repeatTimes);
	void opASL_M(Uint16 address, Uint8 repeatTimes);
	void opLSR_A(Uint8 repeatTimes);
	void opLSR_M(Uint16 address, Uint8 repeatTimes);
	void opROL_A(Uint8 repeatTimes);
	void opROL_M(Uint16 address, Uint8 repeatTimes);
	void opROR_A(Uint8 repeatTimes);
	void opROR_M(Uint16 address, Uint8 repeatTimes);
	void opCMP(Uint8 v1, Uint8 v2);

	void setLoadFlag(Uint8 v);

	void pushAddress(Uint16 address);
	void popAddress();
	void pushStatus();
	void popStatus();
	void opPLA();
	void opPHA();

	void wait();
	void signal();

	void reset();
	void repeat();
	void nmi();
	void brk();

	void SUB_00003A();
	void SUB_000069();
	void SUB_00007A();
	void SUB_00008D();
	void SUB_0000AC();
	void SUB_0002AA();
	void SUB_0002B8();
	void SUB_0002DD();
	void SUB_000390();
	void SUB_000399();
	void SUB_0003AD();
	void SUB_000420();
	void SUB_00042B();
	void SUB_00044A();
	void SUB_000450();
	void SUB_000453();
	void SUB_000456();
	void SUB_0004D3();
	void SUB_0004D6();
	void SUB_0004DF();
	void SUB_0004F3();
	void SUB_0004F6();
	void SUB_0004FA();
	void SUB_0004FF();
	void SUB_000500();
	void SUB_00053B();
	void SUB_000549();
	void SUB_00057F();
	void SUB_0005B0();
	void SUB_0005D6();
	void SUB_0006E5();
	void SUB_00073D();
	void SUB_00079E();
	void SUB_0007CF();
	void SUB_0007E7();
	void SUB_000839();
	void SUB_00088D();
	void SUB_0008A1();
	void SUB_0008C8();
	void SUB_0008F3();
	void SUB_0008FB();
	void SUB_000953();
	void SUB_000999();
	void SUB_0009AD();
	void SUB_0009B7();
	void SUB_0009C1();
	void SUB_000A95();
	void SUB_000B14();
	void SUB_000B5B();
	void SUB_000B73();
	void SUB_000B8E();
	void SUB_000BA6();
	void SUB_000BB8();
	void SUB_000C30();
	void SUB_000C47();
	void SUB_000CA4();
	void SUB_000CC2();
	void SUB_000D28();
	void SUB_000D31();
	void SUB_000D73();
	void SUB_000DE2();
	void SUB_000E36();
	void SUB_000EC4();
	void SUB_000EF1();
	void SUB_000EFC();
	void SUB_000F00();
	void SUB_000F02();
	void SUB_000F37();
	void SUB_000F4A();
	void SUB_000F59();
	void SUB_000F62();
	void SUB_000FB5();
	void SUB_000FFC();
	void SUB_00102F();
	void SUB_00103C();
	void SUB_00108D();
	void SUB_0010D2();
	void SUB_0010FD();
	void SUB_001109();
	void SUB_001152();
	void SUB_001179();
	void SUB_00127B();
	void SUB_001298();
	void SUB_00129E();
	void SUB_0012AD();
	void SUB_0012B0();
	void SUB_0012D3();
	void SUB_001372();
	void SUB_0013EA();
	void SUB_00145F();
	void SUB_001465();
	void SUB_001474();
	void SUB_00147B();
	void SUB_0014DC();
	void SUB_0014DF();
	void SUB_00157C();
	void SUB_001586();
	void SUB_0015B7();
	void SUB_001633();
	void SUB_00168F();
	void SUB_0016E8();
	void SUB_0018F4();
	void SUB_00198B();
	void SUB_0019E0();
	void SUB_001A00();
	void SUB_001A1F();
	void SUB_001DD7();
	void SUB_001E04();
	void SUB_001E18();
	void SUB_001E77();
	void SUB_001ECF();
	void SUB_001F02();
	void SUB_001FA9();
	void SUB_00200A();
	void SUB_002038();
	void SUB_0020FB();
	void SUB_0021D6();
	void SUB_00224F();
	void SUB_002278();
	void SUB_002297();
	void SUB_002318();
	void SUB_002348();
	void SUB_0023A8();
	void SUB_0023C5();
	void SUB_0023D8();
	void SUB_0023EC();
	void SUB_0023EF();
	void SUB_002415();
	void SUB_00246B();
	void SUB_002487();
	void SUB_002510();
	void SUB_002534();
	void SUB_0025A4();
	void SUB_0025D5();
	void SUB_002612();
	void SUB_002721();
	void SUB_002779();
	void SUB_002780();
	void SUB_002798();
	void SUB_0027B7();
	void SUB_0027F3();
	void SUB_00288E();
	void SUB_0028AA();
	void SUB_002905();
	void SUB_002934();
	void SUB_002946();
	void SUB_00294F();
	void SUB_002980();
	void SUB_00299B();
	void SUB_0029A4();
	void SUB_0029C8();
	void SUB_0029D9();
	void SUB_002ACF();
	void SUB_002AF3();
	void SUB_002AF8();
	void SUB_002B20();
	void SUB_002C3E();
	void SUB_002C7B();
	void SUB_002D1A();
	void SUB_002D36();
	void SUB_002D5F();
	void SUB_002D9E();
	void SUB_002DB1();
	void SUB_002DE2();
	void SUB_002E5E();
	void SUB_002E86();
	void SUB_002EA8();
	void SUB_002ECE();
	void SUB_002F04();
	void SUB_002F21();
	void SUB_002F3D();
	void SUB_002F46();
	void SUB_002F77();
	void SUB_002FAD();
	void SUB_003031();
	void SUB_00303E();
	void SUB_00303F();
	void SUB_003097();
	void SUB_0030AD();
	void SUB_00362C();
	void SUB_003697();
	void SUB_0036D7();
	void SUB_003703();
	void SUB_00372D();
	void SUB_003813();
	void SUB_003872();
	void SUB_0038A3();
	void SUB_0038B4();
	void SUB_0038B5();
	void SUB_0038F6();
	void SUB_0038FC();
	void SUB_00390C();
	void SUB_003E8D();
	void SUB_003EA3();
	void SUB_003EB4();
	void SUB_003F19();
	void SUB_003F33();
	void SUB_003F47();
	void SUB_003FC3();
	void SUB_003FF7();
	void SUB_003FFC();
	void SUB_004006();
	void SUB_004016();
	void SUB_004076();
	void SUB_004088();
	void SUB_00409A();
	void SUB_0040AA();
	void SUB_0040B1();
	void SUB_0040C3();
	void SUB_0040D5();
	void SUB_0040E7();
	void SUB_0040F1();
	void SUB_004106();
	void SUB_004113();
	void SUB_004126();
	void SUB_00412E();
	void SUB_004133();
	void SUB_004140();
	void SUB_00414D();
	void SUB_004157();
	void SUB_004161();
	void SUB_00416D();
	void SUB_004177();
	void SUB_004337();
	void SUB_0044F9();
	void SUB_004543();
	void SUB_004558();
	void SUB_00456F();
	void SUB_0045CF();
	void SUB_0045F3();
	void SUB_00475F();
	void SUB_00482B();
	void SUB_00485A();
	void SUB_0048AE();
	void SUB_0048EF();
	void SUB_004A15();
	void SUB_004A38();
	void SUB_004A59();
	void SUB_004B37();
	void SUB_004BBC();
	void indirectJump(Uint16 target);

};

